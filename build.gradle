buildscript {
    ext {
        repos = {
            gradlePluginPortal()
            mavenCentral()
        }
        springBootVersion = '2.6.7'
        springCloudVersion = '3.1.2'
        lombokVersion = '1.18.24'
        feignVersion = '11.8'
        vauntVersion = '1.0.28'
        jdbcVersion = '5.3.15'
        liquidbaseVersion = '4.6.2'
        openApiVersion = '1.6.8'
        requestValidatorPactVersion = '2.22.0'
        postgresVersion = '42.3.4'
        kubernetesClientVersion = '5.12.2'
        httpClientVersion = '4.5.13'
        consulApiVersion = '1.4.5'
        coverallsVersion = '2.12.0'
        palantirDockerVersion = '0.33.0'
        grgitVersion = '4.1.1'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'com.github.kt3k.coveralls' version "${coverallsVersion}"
    id "com.palantir.docker" version "${palantirDockerVersion}"
    id 'org.ajoberstar.grgit' version "${grgitVersion}"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    compileJava {
        options.release = 11
    }

    repositories(repos)

    group = 'com.hltech.judged'
    version = buildVersion()

    jacoco {
        toolVersion = "0.8.6"
    }
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'application'
    apply plugin: 'com.palantir.docker'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    apply from: '../gradle/test.gradle'

    jar {
        enabled = false
    }
}

bootJar {
    enabled = false
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

def buildVersion() {
    def baseVersion = 1

    def commitsCount = grgit.log().size()
    def lastCommit = grgit.head().abbreviatedId
    return "${baseVersion}.${commitsCount}.0_${lastCommit}"
}
